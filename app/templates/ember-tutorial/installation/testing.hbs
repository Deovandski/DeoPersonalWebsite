<h2>Testing Tutorial</h2>
<h3><strong>Step 7 - </strong>Project Tests</h3>
<section>
{{#if emberTutorial.checkValue_7}}
<p></p>
{{else}}
<p>Now it is time to learn a bit about how Ember Cli works. 
Ember is a very opinionated framework which means that it is quite strict 
in how developers should tackle it. However, this also allows quicker 
and neater development.</p>
<p>Step 7 will guide you to create an index, about and an archive page with two subpages.
 Before you further progress into Step 7, if you are using gedit as the editor, 
 then please open the preferences window and deactivate "Create a backup copy of file before saving". 
 This will stop creating file ending with ~ which becomes a pain as the repo grows.</p>
<p>Now, close the server and follow these steps to scaffold the initial routes:</p>
<ol>
  <li><code>ember g route index</code></li>
  <li><code>ember g route archives</code></li>
  <li><code>ember g route archives/pageOne</code></li>
  <li><code>ember g route archives/pageTwo</code></li>
  <li>Now go to the App/router.js (which is where all the routes 
  {think of it as URLs} are defined), and change the archives route
  to the following:
<pre>
this.route('archives', function() {
    this.route('index', { path: '/' });
    this.route('pageOne');
    this.route('pageTwo');
});
</pre></li>
  <li>Now head to templates/index.hbs and add any text before {outlet} 
(the one double brackets.) If you do not know what it is, 
then welcome to the world of <a href="http://handlebarsjs.com/" target="_blank">Handlebars</a>!
Basically, you can think of it as the interface between plain HTML and Ember.js. 
For all the code below <strong>please switch single bracket to double brackets!</strong></li>
  <li>Now head to application.hbs and add the following:
  <pre>
{#link-to 'index'}My Personal Website{/link-to}
{#link-to 'archives'}My archives{/link-to}
  </pre></li>
  <li>Now go to the archives template and add links to the two subpages. 
  An example is <pre>{#link-to 'archives.pageOne'}My Personal Website{/link-to} </pre></li>
  <li>Now add something on PageOne and PageTwo under archives before or 
  after the {outlet}. In case you haven't figured out, {outlet} is usually where the child of the route is rendered so to speak.</li>
</ol>
<p> Visit <a href="http://emberjs.com/" target="_blank">EmberJS</a> 
if you need more information, or this <a href="https://github.com/Deovandski/DeoEmberCliGuide/tree/2ece3cff3a71ab6a156aa53e39454f705bcfa6c6" target="_blank">link</a> 
if your project does not match the picture below:</p>
<a href="http://imgur.com/qNZ0zS8" target="_blank"><img height=300 src="http://i.imgur.com/qNZ0zS8.png" title="source: imgur.com" /></a>
<p>Ready to go? Then let's move on to Step 8!</p>
{{/if}}
<div class="ul_li_colored_3 ember_confirmation"><label>Section complete?</label>  {{input type="checkbox" checked=emberTutorial.checkValue_7}}</div>
</section>
<h3><strong>Step 8 - </strong>TravisCI</h3>
<section>
{{#if emberTutorial.checkValue_8}}
<p></p>
{{else}}
<p>Although your current project is really small, it is a good move to 
setup testing earlier on, and so we will get TravisCI to build our project 
and run tests every time we push a commit to the remote (Github) master branch.</p>
<p>Follow these steps to get TravisCI to work on your repo.</p>
<ol>
  <li>Open an account on <a href="https://travis-ci.org/" target="_blank">TravisCI</a>
, and follow the steps to activate TravisCI on your repo.</li>
  <li>Make any changes on your local repo and push it to the server in 
  order to trigger a build as your Ember Cli comes already with a .travis.yml.
  If it did not, then create one at the root of your repo with the following content:
  <pre>
  ---
language: node_js
node_js:
  - "5.1"

sudo: false

cache:
  directories:
    - node_modules
    - bower_components

before_install:
  - export PATH=/usr/local/phantomjs-2.0.0/bin:$PATH
  - "npm config set spin false"
  - "npm install -g npm@^3.6"

install:
  - npm install -g bower
  - npm install
  - bower install

script:
  - ember test
  </pre></li>
  <li>When your build is complete. Click the <img src="https://travis-ci.org/Deovandski/DeoPersonalWebsite.svg?branch=master">
  that shows up on your build and select <a href="https://en.wikipedia.org/wiki/Markdown" target="_blank">Markdown</a> 
  (which is a markup language supported by Github.) It will be something like below:</li>
  <pre>
  [![Build Status](https://travis-ci.org/Deovandski/DeoPersonalWebsite.svg?branch=master)](https://travis-ci.org/Deovandski/DeoPersonalWebsite)
  </pre>
  <li>Now go to your README.md (or create one) and add your own Markdown of the badge. 
  If you want to go one step further and make a cute page for your repo, 
  then look into how Markdown is <a href="https://guides.github.com/features/mastering-markdown/" target="_blank">used</a>.</li>
</ol>
{{/if}}
<div class="ul_li_colored_3 ember_confirmation"><label>Section complete?</label>  {{input type="checkbox" checked=emberTutorial.checkValue_8}}</div>
</section>
<h3><strong>Step 9 - </strong>CodeClimate, Hakiri and Gemnasium</h3>
<section>
{{#if emberTutorial.checkValue_9}}
<p></p>
{{else}}
<p>TravisCI is nice and all, but let's go one step further! 
The following tools below will make maintenance a breeze:</p>
<ul>
  <li><strong><a href="https://codeclimate.com/" target="_blank">CodeClimate</a></strong>: Track Code Coverage, code GPA and possible issues. 
  When you create an account, you will need to patch your repo by downloading codeclimate-config.patch from the analysis configuration page 
  (easily accessible from a yellow banner that appears informing you about the issue.) When you download it, move the file to the root of 
  your repo and run <code>patch &lt; codeclimate-config.patch </code>. After delete the patch file and commit your changes so that it looks 
  like this <a href="https://github.com/Deovandski/DeoEmberCliGuide/commit/c6e78fb134d8f686359078ac0796482300e2e2e9" target="_blank">commit</a>.</li>
  <li><strong><a href="https://hakiri.io/" target="_blank">Hakiri</a></strong>: Track warnings and possible security issues for your code.</li>
  <li><strong><a href="https://gemnasium.com/" target="_blank">Gemnasium</a></strong>: Track Project Dependencies and vulnerabilities.</li>
</ul>
<p>If you do use CodeClimate, then I suggest you to update your <strong>.codeclimate.yml</strong> to the following:
<pre>engines:
  rubocop:
    enabled: false
  golint:
    enabled: true
  gofmt:
    enabled: true
  eslint:
    enabled: true
  csslint:
    enabled: true
  bundler-audit:
    enabled: false
  fixme:
    enabled: true
  duplication:
    enabled: true
    config:
      languages:
      - javascript
ratings:
  paths:
    - "app/**"
    - "config/**"
    - "dist/**"
    - "tests/**"
exclude_paths:
- node_modules/**/*
- bower_components/**/*
- dist/**/*
- vendor/**/*
- "README.md"
</pre></p>
<p>Once in a while Code Climate may release new engines, so you should keep
 an eye out for what is different. However, If you plan in using Code Coverage,
  then you need to setup ember-cli-blanket with <code>ember install ember-cli-blanket</code></p>
<ol>
  <li>Now edit <strong>blanket-options.js</strong> under tests folder (Make sure to not only copy and paste):
<pre>/* globals blanket, module */

var options = {
  modulePrefix: 'test-app', // Replace with your app name
  filter: '//.*test-app/.*/', // Replace with your app name
  loaderExclusions: [],
  enableCoverage: true,
  cliOptions: {
    lcovOptions: {
      outputFile: 'lcov.dat',
    },
    reporters: ['lcov'],
    autostart: true
  }
};
if (typeof exports === 'undefined') {
  blanket.options(options);
} else {
  module.exports = options;
}
</pre></li>
  <li>Open package.json on the root folder and add <code> "codeclimate-test-reporter": "^0.3.1",</code> as a dependency.</li>
  <li>Open testem.json on the root folder and change the test_page line 
  to <code>"test_page": "tests/index.html?hidepassed&coverage",</code></li>
  <li>Update the after_script section of your travis.yml like my <a href="https://github.com/Deovandski/DeoPersonalWebsite/blob/master/.travis.yml" target="_blank">version</a>
  (make sure to replace the Code CLimate repo token with yours which can be found under Settings/Test Coverage/Travis):
  </li>
<li>Run <code>npm install</code> followed by <code>bower install</code></li>
</ol>
<p>The badge process is really similar, but since you will have quite a few of them, I suggest organizing your markdown in the following manner:
<pre>[![Build Status][travis-badge]][travis] [![Test Coverage][testCoverage-badge]][testCoverage] 

  
[travis]: https://travis-ci.org/Deovandski/DeoEmberCliGuide
[travis-badge]: https://travis-ci.org/Deovandski/DeoEmberCliGuide.svg?branch=master
[testCoverage]: https://codeclimate.com/github/Deovandski/DeoEmberCliGuide/coverage
[testCoverage-badge]: https://codeclimate.com/github/Deovandski/DeoEmberCliGuide/badges/coverage.svg
</pre></p>
<p>Need a break? This has been quite a lot to do, so you should get one! 
If your repo does look like the <a href="https://github.com/Deovandski/DeoEmberCliGuide" target="_blank">example</a> one, 
then it is time for Heroku! </p>
{{/if}}
<div class="ul_li_colored_3 ember_confirmation"><label>Section complete?</label>  {{input type="checkbox" checked=emberTutorial.checkValue_9}}</div>
</section>
